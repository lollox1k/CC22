import numpy as np
from tqdm import tqdm
from binascii import hexlify
from math import gcd


def encrypt(e, n, m):           #basic RSA encryption:  c = m^e mod(n), m= plaintext, e=public key, c = cipher text
    m = int( m.encode("utf-8").hex(), 16)
    return str(pow(m, e, n))


#first attemp: brute force for n
k = 2**511 #randint(2 ^ 511, 2 ^ 512)    #random  #lb 2^511
x = 0xDEAD * 13                  #fixed
y = 0xBEEF * 17                  #fixed
z = 1000 #randint(1000, 10000)         #random  #lb 1000
w = 1000# randint(1000, 10000)

lb = (x * (k ** 2) + z)*(y * (k ** 2) + w)

e = 65537
'''
for n in range(lb, lb*100):
    c = encrypt(e,n,"You can't factor the modulus")
    if c == '2028019541978708433659102662508608624976053978691423469261621876657128693760534931880725099057550672068891218716725008252625434454309133754850858015484143711973520261333221644839241613471733468980762350122608739354922739715693938572044697411732446385595987461063365931721779372016528753851954440895347508690234480074510381418604879990796353229396573320269905270952077145358067665166959918657102516027799942947780277887368674031489015729124808493140391155467669453195272806255938469964793744643421002077449238125555243013687210665056128695933715056050125658811712310934640986838303129429437313514271859106715865772019874721406522':
        print(n)
        break
'''

P1 = int("You can't factor the modulus".encode("utf-8").hex(), 16)
print("P1: ", P1)
P2 = int("If you don't know the modulus ;)".encode("utf-8").hex(), 16)
print("P2: ", P2)

C1 = 2028019541978708433659102662508608624976053978691423469261621876657128693760534931880725099057550672068891218716725008252625434454309133754850858015484143711973520261333221644839241613471733468980762350122608739354922739715693938572044697411732446385595987461063365931721779372016528753851954440895347508690234480074510381418604879990796353229396573320269905270952077145358067665166959918657102516027799942947780277887368674031489015729124808493140391155467669453195272806255938469964793744643421002077449238125555243013687210665056128695933715056050125658811712310934640986838303129429437313514271859106715865772019874721406522
C2 = 1533278110403793335079805268735971581936154337528662327061184757587600462787590106813740807771651354945588303414641792896895585719717492859710247456106466490701232783392711983631941638428124324007613108834262978950535478958332223825747546008981909581634459059517161126727743398653000238584387354263562012694425470893026635167025348505105380924025354553067153010261493654993511985861011790460398558033246599787641906411190894804462972078453062032312170902702022859916043169744707823736697831233250038161341267979388321987147513172913248227078877398815685608298626734418208885522377957874007865072578374987239793256217801299260876




G = gcd( C1 - P1, C2 - P2 )

print('G: ',G)
#find divisors

for i in range(1,int(G/2)):
    if G % i == 0:
        print(i)
